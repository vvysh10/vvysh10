#Constructor Overloading

class A
{
A()
{
System.out.println("CONSTRUCTOR WITHOUT ARGUMENTS");
}
A(int a)
{
System.out.println("CONSTRUCTOR WITH ARGUMENTS");
}
}
class Coverload
{
public static void main(String args[])
{
A obj=new A();
A obj1=new A(10);
}
}

#Algorithm
1.Start the program
2.Define class A
  a)Declare class A.
  b)Define a constructor A() without any arguments
    .print "CONSTRUCTOR WITHOUT ARGUMENTS"
   Define another Constructor A(int a) with an integer argument.
   .print "CONSTRUCTOR WITH ARGUMENTS
 3.Define class Coverload
    a)Declare class Coverload
    b)Define the Main Method
        .start the execution of the main method
      .Create an object obj of class A using default constructor A()
        .invoke the constructor A() of class A
        .Print "CONSTRUCTOR WITHOUT ARGUMENTS"
      .Create an object obj1 of class A using constructor A(int a):
        .invoke the constructor A(int a) of class A with the Argument 10.
        .Print "CONSTRUCTOR WITH ARGUMENTS"
      .End of Execution of the main method
  4.End  the Program
  
  
  Note:
      The purpose of this program is to demostrate constructor Overloading in java
      Constructor Overloading allows you to define multiple Constructors within a class with different arguments.
      When an object is created ,the appropriate constructor is called based on the  arguments provided.
      
      
      
   #Method Overloading   
     
     class A
{
  void add()
  {
       int a=10,b=20;
       int c=a+b;
       System.out.println("sum="+c);
  }
  void add(int x,int y)
  {
     int z=x+y;
     System.out.println("sum="+z);
   }
}
class Moverload
{
   public static void main(String args[])
   {
      A obj=new A();
      obj.add();
      obj.add(40,50);
    }
}

output:
sum=30
sum=90

#Algorithm:

1.Start the Program.
2.Define a class A
    a.Declare class A
    b.Define a method add() without Arguments
    c.Declare and Initialize 2 integer variables a and b with the values 10,20 respectively.
    d.compute the sum of a and b and store it in a variable c
    e.print the "sum=" followed by the value
3.Define a method add(int x,int y) with arguments
     .Declare a variable z.
     .compute x and y ,store it in a variable z
     .print "sum=" follows by the value 
4.Define class Moverload
     a.Declare a Moverload
     b.Define main method
           .start the execution of the main method
           .create an object "obj" of class A using default constructor.
               .Invoke the default constructor of class A
            .Call the method add() on the object obj
                .Invoke the method of class A
                .print "sum=" followed by the value of sum
             .Call the method add(int x, int y) on the obj with the argumenyts 40,50.
                 .Invoke the method of class A
                 .print "sum=" followed by the value of sum
             .End of Main Method
 5. End the Program
 
Note:
To purpose of this code is to demostrate method overloading
Method overloading allows ypu to define multiple classes with same name with different parameters.
The appropriate method is called based on the  arguments provided.
           
           .
   
